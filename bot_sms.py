#!/usr/bin/env python3
"""
Bot de Vendas SMS Premium - Vers√£o Corrigida
Bot Telegram para venda de n√∫meros SMS premium
"""

import logging
import os
import sqlite3
import asyncio
import aiohttp
import random
import string
import json
import urllib.parse
import threading
import time
import hashlib
import hmac
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from collections import defaultdict
from functools import wraps

# Configura√ß√£o de logs
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Verificar tokens essenciais
BOT_TOKEN = os.getenv("BOT_TOKEN")
CRYPTOPAY_API_TOKEN = os.getenv("CRYPTOPAY_API_TOKEN")
FIVESIM_API_TOKEN = os.getenv("FIVESIM_API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN n√£o encontrado! Configure o token do bot no Secrets.")
    raise ValueError("BOT_TOKEN √© obrigat√≥rio!")

logger.info("ü§ñ Bot de Vendas SMS Premium - Iniciando...")
logger.info(f"üëë Admin ID: {ADMIN_ID}")

# Rate limiting
user_rate_limits = defaultdict(list)
RATE_LIMIT_SECONDS = 1.0
MAX_REQUESTS_PER_MINUTE = 20

def rate_limit(func):
    """Decorator para rate limiting por usu√°rio"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.effective_user:
            return
        
        user_id = update.effective_user.id
        now = time.time()
        
        # Limpar requests antigos
        user_rate_limits[user_id] = [req_time for req_time in user_rate_limits[user_id] 
                                    if now - req_time < 60]
        
        # Verificar rate limit
        if len(user_rate_limits[user_id]) >= MAX_REQUESTS_PER_MINUTE:
            try:
                if hasattr(update, 'message') and update.message:
                    await update.message.reply_text("‚ö†Ô∏è Muitas solicita√ß√µes! Aguarde um momento.")
                elif hasattr(update, 'callback_query') and update.callback_query:
                    await update.callback_query.answer("‚ö†Ô∏è Aguarde um momento.", show_alert=False)
            except Exception as e:
                logger.error(f"Erro ao enviar mensagem de rate limit: {e}")
            return
        
        # Verificar intervalo m√≠nimo
        if user_rate_limits[user_id] and now - user_rate_limits[user_id][-1] < RATE_LIMIT_SECONDS:
            return
        
        user_rate_limits[user_id].append(now)
        return await func(update, context)
    return wrapper

# Database simples
class SimpleDB:
    def __init__(self):
        self.db_path = "bot_sms.db"
        self.init_db()
    
    def init_db(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS usuarios (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                saldo REAL DEFAULT 0.0,
                saldo_bonus REAL DEFAULT 0.0,
                numeros_gratis INTEGER DEFAULT 0,
                data_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_depositado REAL DEFAULT 0.0,
                total_gasto REAL DEFAULT 0.0,
                numeros_comprados INTEGER DEFAULT 0
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("‚úÖ Database inicializado")
    
    def get_or_create_user(self, user_id, username=None, first_name=None):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM usuarios WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()
        
        if not user:
            cursor.execute('''
                INSERT INTO usuarios (user_id, username, first_name) 
                VALUES (?, ?, ?)
            ''', (user_id, username, first_name))
            conn.commit()
            logger.info(f"üë§ Novo usu√°rio criado: {user_id}")
        
        conn.close()
        return True
    
    def get_saldo(self, user_id):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT saldo FROM usuarios WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else 0.0
    
    def get_saldo_bonus(self, user_id):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT saldo_bonus FROM usuarios WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else 0.0

# Inst√¢ncia global do database
db = SimpleDB()

@rate_limit
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start - Menu principal"""
    user = update.effective_user
    if not user:
        return
    
    # Criar usu√°rio se n√£o existir
    db.get_or_create_user(user.id, user.username, user.first_name)
    
    saldo = db.get_saldo(user.id)
    saldo_bonus = db.get_saldo_bonus(user.id)
    
    keyboard = [
        [
            InlineKeyboardButton("üì± COMPRAR N√öMEROS", callback_data="menu_servicos"),
            InlineKeyboardButton("üí≥ RECARREGAR", callback_data="menu_recarga")
        ],
        [
            InlineKeyboardButton("üîó INDICAR AMIGOS", callback_data="menu_indicacao"),
            InlineKeyboardButton("‚ùì AJUDA", callback_data="menu_ajuda")
        ]
    ]
    
    if user.id == ADMIN_ID:
        keyboard.append([
            InlineKeyboardButton("üõ†Ô∏è ADMIN", callback_data="admin_panel")
        ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        f"ü§ñ **BOT SMS PREMIUM**\n\n"
        f"üëã Ol√°, {user.first_name}!\n"
        f"üí∞ Saldo: R$ {saldo:.2f}\n"
        f"üéÅ B√¥nus: R$ {saldo_bonus:.2f}\n\n"
        f"üì± **N√öMEROS DISPON√çVEIS:**\n"
        f"‚Ä¢ WhatsApp, Telegram, Instagram\n"
        f"‚Ä¢ Facebook, Google, Twitter\n"
        f"‚Ä¢ E muito mais!\n\n"
        f"üî• **PRE√áOS A PARTIR DE R$ 2,50**\n"
        f"‚ö° Recebimento instant√¢neo\n"
        f"üéØ Suporte 24h"
    )
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif update.callback_query:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def menu_servicos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Menu de servi√ßos dispon√≠veis"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üì± WhatsApp - R$ 2,50", callback_data="servico_whatsapp"),
            InlineKeyboardButton("üì® Telegram - R$ 3,00", callback_data="servico_telegram")
        ],
        [
            InlineKeyboardButton("üì∏ Instagram - R$ 4,00", callback_data="servico_instagram"),
            InlineKeyboardButton("üë• Facebook - R$ 3,50", callback_data="servico_facebook")
        ],
        [
            InlineKeyboardButton("üîç Google - R$ 2,80", callback_data="servico_google"),
            InlineKeyboardButton("üê¶ Twitter - R$ 4,50", callback_data="servico_twitter")
        ],
        [
            InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üì± **N√öMEROS SMS DISPON√çVEIS**\n\n"
        "üî• **MAIS POPULARES:**\n"
        "‚Ä¢ WhatsApp - Recebimento garantido\n"
        "‚Ä¢ Telegram - Alta taxa de sucesso\n"
        "‚Ä¢ Instagram - Verifica√ß√£o r√°pida\n\n"
        "üí° Escolha o servi√ßo:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def menu_recarga(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Menu de recarga"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton("üí∞ R$ 10,00", callback_data="recarga_10"),
            InlineKeyboardButton("üí∞ R$ 25,00", callback_data="recarga_25")
        ],
        [
            InlineKeyboardButton("üí∞ R$ 50,00", callback_data="recarga_50"),
            InlineKeyboardButton("üí∞ R$ 100,00", callback_data="recarga_100")
        ],
        [
            InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üí≥ **RECARREGAR SALDO**\n\n"
        "üéÅ **B√îNUS DE RECARGA:**\n"
        "‚Ä¢ R$ 50+ = +15% b√¥nus\n"
        "‚Ä¢ R$ 100+ = +20% b√¥nus\n\n"
        "üí° Escolha o valor:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def menu_ajuda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Menu de ajuda"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_principal")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ùì **CENTRAL DE AJUDA**\n\n"
        "ü§ñ **COMO FUNCIONA:**\n"
        "1. Recarregue seu saldo\n"
        "2. Escolha o servi√ßo desejado\n"
        "3. Receba o n√∫mero SMS\n"
        "4. Use para verifica√ß√£o\n\n"
        "‚è±Ô∏è **TEMPO DE RECEBIMENTO:**\n"
        "‚Ä¢ WhatsApp: 1-5 minutos\n"
        "‚Ä¢ Telegram: 1-3 minutos\n"
        "‚Ä¢ Instagram: 2-10 minutos\n\n"
        "üí¨ **SUPORTE:**\n"
        "Para ajuda, fale com um administrador.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Gerenciador principal de callbacks"""
    query = update.callback_query
    if not query or not query.data:
        return
    
    data = query.data
    
    if data == "menu_principal":
        await start(update, context)
    elif data == "menu_servicos":
        await menu_servicos(update, context)
    elif data == "menu_recarga":
        await menu_recarga(update, context)
    elif data == "menu_ajuda":
        await menu_ajuda(update, context)
    elif data.startswith("servico_"):
        await handle_servico(update, context)
    elif data.startswith("recarga_"):
        await handle_recarga(update, context)

async def handle_servico(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar sele√ß√£o de servi√ßo"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer("üîÑ Processando compra...")
    
    servico = query.data.split("_")[1]
    precos = {
        "whatsapp": 2.50,
        "telegram": 3.00,
        "instagram": 4.00,
        "facebook": 3.50,
        "google": 2.80,
        "twitter": 4.50
    }
    
    preco = precos.get(servico, 2.50)
    saldo = db.get_saldo(query.from_user.id)
    
    if saldo < preco:
        keyboard = [
            [InlineKeyboardButton("üí≥ RECARREGAR", callback_data="menu_recarga")],
            [InlineKeyboardButton("üîô Voltar", callback_data="menu_servicos")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ùå **SALDO INSUFICIENTE**\n\n"
            f"üí∞ Seu saldo: R$ {saldo:.2f}\n"
            f"üí∏ Valor necess√°rio: R$ {preco:.2f}\n"
            f"üìä Faltam: R$ {preco - saldo:.2f}\n\n"
            f"üîÑ Recarregue para continuar!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        # Simular compra bem-sucedida
        numero_fake = f"+55119{random.randint(10000000, 99999999)}"
        
        keyboard = [
            [InlineKeyboardButton("üîô Menu Principal", callback_data="menu_principal")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úÖ **N√öMERO SMS ADQUIRIDO**\n\n"
            f"üì± Servi√ßo: {servico.upper()}\n"
            f"üìû N√∫mero: `{numero_fake}`\n"
            f"üí∞ Valor: R$ {preco:.2f}\n\n"
            f"‚è±Ô∏è **AGUARDANDO SMS...**\n"
            f"O c√≥digo chegar√° em at√© 10 minutos.\n\n"
            f"üí° Use este n√∫mero para verifica√ß√£o!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def handle_recarga(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processar recarga"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer("üí≥ Processando pagamento...")
    
    valor = float(query.data.split("_")[1])
    
    keyboard = [
        [InlineKeyboardButton("üîô Voltar", callback_data="menu_recarga")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üí≥ **PAGAMENTO EM PROCESSAMENTO**\n\n"
        f"üí∞ Valor: R$ {valor:.2f}\n"
        f"üîÑ Status: Aguardando pagamento\n\n"
        f"üí° **INSTRU√á√ïES:**\n"
        f"1. Fa√ßa o PIX para a chave\n"
        f"2. Envie o comprovante\n"
        f"3. Aguarde confirma√ß√£o\n\n"
        f"‚ö° Processamento em at√© 5 minutos!",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Tratamento global de erros"""
    logger.error(f"Erro capturado: {context.error}")

async def main():
    """Fun√ß√£o principal"""
    try:
        # Criar aplica√ß√£o
        application = Application.builder().token(BOT_TOKEN).build()
        
        # Adicionar handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_callback))
        application.add_error_handler(error_handler)
        
        # Inicializar e executar
        logger.info("üöÄ Iniciando Bot SMS Premium...")
        await application.initialize()
        await application.start()
        
        # Usar polling
        await application.updater.start_polling(
            allowed_updates=["message", "callback_query"],
            drop_pending_updates=True
        )
        
        logger.info("‚úÖ Bot SMS Premium rodando com sucesso!")
        
        # Manter rodando
        while True:
            await asyncio.sleep(1)
            
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())